pipeline {

  agent {
    docker {
      label 'SpaceJam'
      image '942037308728.dkr.ecr.us-west-2.amazonaws.com/spacejam-builds:latest'
      args '-e npm_config_cache=/npm_cache -v /opt/jenkins/cache:/npm_cache'
    }
  }

  options {
    gitLabConnection('E84 Gitlab')
  }

  environment {
    AWS_DEFAULT_REGION = 'us-west-2'
    AWS_REGION = 'us-west-2'
  }

  stages {

    stage('Versioning') {
        // bumping version number for the develop (formerly v2) pipeline
        when {
            branch 'develop'
        }
        steps {
            sshagent(credentials : ['fogg-rw-deploy-key']) {
                // Without 'force', bump will fail if it doesn't think
                // there is anything to put in the changelog.

                // Note this assumes the remote is gitlab -
                // in bamboo for instance this doesn't work because
                // the remote is a local cached copy of the git index

                // In order for the branch to be known, Jenkins
                // needs this setting on the git plugin:
                //   "Check out to matching local branch"

                sh """git config user.email "buildserver@element84.com"
                    |git config user.name "Jenkins"
                    |GIT_COMMIT_MESSAGE=`git log -n 1 --pretty=%s $GIT_COMMIT`
                    |if [[ "\$GIT_COMMIT_MESSAGE" == "Merge branch "* ]]; then
                    |  npm version 0.2.$BUILD_NUMBER
                    |  ssh -o "StrictHostKeyChecking=no" -T git@repo.element84.com
                    |  git config push.default current
                    |  git push
                    |fi
                """.stripMargin()
            }
        }
    }

    stage('Prepare'){

      steps {
        echo sh(returnStdout: true, script: 'env')

        updateCommitStatus('pending')
        rtServer (
            id: 'artifactory',
            url: 'https://artifactory.prod.element84.com/artifactory',
            credentialsId: 'artifactory'
        )
        rtNpmResolver (
            id: 'npm-resolver',
            serverId: 'artifactory',
            repo: 'space-jam-virtual'
        )
        rtNpmDeployer (
            id: 'npm-deployer',
            serverId: 'artifactory',
            repo: 'e84-shared-npm-local'
        )

        sshagent(credentials : ['spacejam-buildserver']) {

          sh 'mkdir -p ~/.ssh'
          sh 'touch ~/.ssh/config'
          sh 'echo "StrictHostKeyChecking no" >> ~/.ssh/config'

          updateCommitStatus('running')

          echo "Installing..."
          rtNpmInstall (
              path: "$WORKSPACE",
              resolverId: 'npm-resolver',
              args: '--audit --loglevel warn'
          )

          echo "Updating Snapshots and Running Tests..."
          sh 'npm run jest -- -u'

        }

      }

    }

    stage('Build'){

      steps {

        // The actual build...

        rtNpmResolver (
            id: 'npm-resolver',
            serverId: 'artifactory',
            repo: 'space-jam-virtual'
        )

        sh 'npm run build'
        sh 'mkdir -p artifacts'
        sh 'tar --exclude="./artifacts" -czf artifacts/dashboard.tgz public'
        archiveArtifacts artifacts: 'artifacts/dashboard.tgz', fingerprint: true

        rtPublishBuildInfo (
            serverId: 'artifactory'
        )
      }
    }

    stage('Publish') {
        // Under same conditions as versioning - we publish a new build
        when {
            branch 'develop'
        }
        steps {
            rtNpmPublish (
                path: "$WORKSPACE",
                deployerId: 'npm-deployer'
            )
            rtPublishBuildInfo (
                serverId: 'artifactory'
            )
        }
    }

    stage('Sonar Scan') {
      options {
          timeout(time: 1, unit: 'HOURS')
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONARTOKEN')]) {
          sh '''
              npm run sonar -- -Dsonar.login=$SONARTOKEN
          '''
        }
      }
    }

/* Commenting this out to try and get a v2 build to pass
    stage('Xray Scan') {
      options {
        timeout(time: 1, unit: 'HOURS')
      }
      steps {
        xrayScan (
          serverId: 'artifactory',
          failBuild: false
        )
      }
    }
*/
    stage('Deploy Feature') {
      when { branch 'feature/*' }
      steps {
        deployFeature()
      }
    }

    stage('Deploy SIT') {
      when { branch 'develop' }
      steps {
        deploySIT()
      }
    }

  }

  post {
    always {
      echo 'Cleaning workspace...'
      deleteDir()
    }
    success {
      updateCommitStatus('success')
    }
    failure {
      updateCommitStatus('failed')
      notifySlack('failure')
    }
  }

}

void deployFeature() {
  sh 'echo "Feature"'
  script {
    echo("Branch: " + env.BRANCH_NAME)
    def match = (env.BRANCH_NAME =~ /^(?i)feature\/((jam|fd|cd)-\d+).*/)

    if(!match.hasGroup() || match.size() == 0) {
          error "Unable to find Jira ticket in branch name"
    }
    env.JIRA_TICKET = match[0][1]
  }
  performDeploy("${JIRA_TICKET}", 'dev', true)
}

void deploySIT() {
  sh 'echo "SIT"'
  performDeploy('sit', 'sit')
}

void deployUAT() {
  sh 'echo "UAT"'
  performDeploy('uat', 'uat')
}

void performDeploy(environment, credentials_env = 'dev', createBucket = false) {
  env.target_environment = environment.toLowerCase()
  env.target_bucket = "fogg-${target_environment}"
  env.credentials_env = credentials_env
  env.s3_bucket = "http://${target_bucket}.s3-website-us-west-2.amazonaws.com"

  withAWS(credentials: "deploy-${credentials_env}-dashboard", region:'us-west-2') {

    if(createBucket) {
      sh '''
          cd build-deploy && \
          sh ./create-bucket.sh "${target_environment}" "${target_bucket}" "${credentials_env}"
          aws lambda invoke --function-name pipeline-service-live-initializeNewEnvironment --region us-west-2 --log-type Tail --payload '{"key":"'${JIRA_TICKET}'", "url":"'${s3_bucket}'"}' /tmp/outfile-${JIRA_TICKET}.txt && cat "/tmp/outfile-${JIRA_TICKET}.txt" && echo "${JIRA_TICKET}\n"
        '''
    }

    echo 'Syncing deployment to S3...'

    sh '''
      aws s3 rm s3://${target_bucket} --recursive
      aws s3 cp ./public s3://${target_bucket}/ --recursive
    '''
  }

  notifySlack('success', environment == "uat" || environment == "prod")
}

void updateCommitStatus(status) {
    updateGitlabCommitStatus name: 'build', state: "$status"
}

void notifySlack(status = 'success', showChangelog = false) {
    color = 'good'
    channel = '#space-jam-deploys'
    job = "${env.JOB_NAME} - ${env.BRANCH_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"

    message = "Deployed to ${env.target_environment} - ${env.s3_bucket} - ${job} :pikachu:"

    if ( status == 'failure' ) {
      color = '#FF0000'
      message = "Build Failed - ${job} :alert:"
    }

    if (showChangelog) {
      changelog = sh (
        script: "cd build-deploy && . ./stack-functions.sh && changelog",
        returnStdout: true
      )

      if (changelog != null && changelog != "") {
        message = message + "\n" + changelog
      }
    }

    slackSend color: color, channel: channel, message: message
}

